// Mocks generated by Mockito 5.4.5 from annotations
// in dima_project/test/service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:dima_project/content/bookings/booking_model.dart' as _i6;
import 'package:dima_project/content/bookings/booking_update_model.dart' as _i8;
import 'package:dima_project/content/bookings/bookings_service.dart' as _i4;
import 'package:dima_project/content/home/gym/activity/activity_model.dart'
    as _i12;
import 'package:dima_project/content/home/gym/activity/book_slot/slot_model.dart'
    as _i7;
import 'package:dima_project/content/home/gym/activity/book_slot/slot_service.dart'
    as _i17;
import 'package:dima_project/content/home/gym/gym_model.dart' as _i10;
import 'package:dima_project/content/home/gym/gym_service.dart' as _i9;
import 'package:dima_project/content/instructors/instructor_model.dart' as _i16;
import 'package:dima_project/content/instructors/instructor_service.dart'
    as _i15;
import 'package:dima_project/global_providers/user/user_model.dart' as _i14;
import 'package:dima_project/global_providers/user/user_service.dart' as _i13;
import 'package:firebase_auth/firebase_auth.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseFirestore_0 extends _i1.SmartFake
    implements _i2.FirebaseFirestore {
  _FakeFirebaseFirestore_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFirebaseAuth_1 extends _i1.SmartFake implements _i3.FirebaseAuth {
  _FakeFirebaseAuth_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [BookingsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookingsService extends _i1.Mock implements _i4.BookingsService {
  @override
  _i2.FirebaseFirestore get firestore =>
      (super.noSuchMethod(
            Invocation.getter(#firestore),
            returnValue: _FakeFirebaseFirestore_0(
              this,
              Invocation.getter(#firestore),
            ),
            returnValueForMissingStub: _FakeFirebaseFirestore_0(
              this,
              Invocation.getter(#firestore),
            ),
          )
          as _i2.FirebaseFirestore);

  @override
  _i3.FirebaseAuth get firebaseAuth =>
      (super.noSuchMethod(
            Invocation.getter(#firebaseAuth),
            returnValue: _FakeFirebaseAuth_1(
              this,
              Invocation.getter(#firebaseAuth),
            ),
            returnValueForMissingStub: _FakeFirebaseAuth_1(
              this,
              Invocation.getter(#firebaseAuth),
            ),
          )
          as _i3.FirebaseAuth);

  @override
  _i5.Future<List<_i6.Booking>> fetchBookings() =>
      (super.noSuchMethod(
            Invocation.method(#fetchBookings, []),
            returnValue: _i5.Future<List<_i6.Booking>>.value(<_i6.Booking>[]),
            returnValueForMissingStub: _i5.Future<List<_i6.Booking>>.value(
              <_i6.Booking>[],
            ),
          )
          as _i5.Future<List<_i6.Booking>>);

  @override
  _i5.Future<String?> addBooking(_i6.Booking? booking, _i7.Slot? slot) =>
      (super.noSuchMethod(
            Invocation.method(#addBooking, [booking, slot]),
            returnValue: _i5.Future<String?>.value(),
            returnValueForMissingStub: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);

  @override
  _i5.Future<void> deleteBooking(_i6.Booking? booking) =>
      (super.noSuchMethod(
            Invocation.method(#deleteBooking, [booking]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> markUpdateAsRead(_i8.BookingUpdate? bookingUpdate) =>
      (super.noSuchMethod(
            Invocation.method(#markUpdateAsRead, [bookingUpdate]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [GymService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGymService extends _i1.Mock implements _i9.GymService {
  @override
  _i5.Future<List<_i10.Gym>> fetchGymList() =>
      (super.noSuchMethod(
            Invocation.method(#fetchGymList, []),
            returnValue: _i5.Future<List<_i10.Gym>>.value(<_i10.Gym>[]),
            returnValueForMissingStub: _i5.Future<List<_i10.Gym>>.value(
              <_i10.Gym>[],
            ),
          )
          as _i5.Future<List<_i10.Gym>>);

  @override
  _i5.Future<String> addGym(_i10.Gym? gym) =>
      (super.noSuchMethod(
            Invocation.method(#addGym, [gym]),
            returnValue: _i5.Future<String>.value(
              _i11.dummyValue<String>(this, Invocation.method(#addGym, [gym])),
            ),
            returnValueForMissingStub: _i5.Future<String>.value(
              _i11.dummyValue<String>(this, Invocation.method(#addGym, [gym])),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<void> updateGym(_i10.Gym? gym) =>
      (super.noSuchMethod(
            Invocation.method(#updateGym, [gym]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> deleteGym(String? gymId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteGym, [gymId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> setActivity(_i10.Gym? gym) =>
      (super.noSuchMethod(
            Invocation.method(#setActivity, [gym]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> deleteActivity(_i10.Gym? gym, _i12.Activity? activity) =>
      (super.noSuchMethod(
            Invocation.method(#deleteActivity, [gym, activity]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<String> uploadImage(String? base64Image) =>
      (super.noSuchMethod(
            Invocation.method(#uploadImage, [base64Image]),
            returnValue: _i5.Future<String>.value(
              _i11.dummyValue<String>(
                this,
                Invocation.method(#uploadImage, [base64Image]),
              ),
            ),
            returnValueForMissingStub: _i5.Future<String>.value(
              _i11.dummyValue<String>(
                this,
                Invocation.method(#uploadImage, [base64Image]),
              ),
            ),
          )
          as _i5.Future<String>);
}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i13.UserService {
  @override
  _i3.FirebaseAuth get firebaseAuth =>
      (super.noSuchMethod(
            Invocation.getter(#firebaseAuth),
            returnValue: _FakeFirebaseAuth_1(
              this,
              Invocation.getter(#firebaseAuth),
            ),
            returnValueForMissingStub: _FakeFirebaseAuth_1(
              this,
              Invocation.getter(#firebaseAuth),
            ),
          )
          as _i3.FirebaseAuth);

  @override
  set firebaseAuth(_i3.FirebaseAuth? _firebaseAuth) => super.noSuchMethod(
    Invocation.setter(#firebaseAuth, _firebaseAuth),
    returnValueForMissingStub: null,
  );

  @override
  _i2.FirebaseFirestore get firestore =>
      (super.noSuchMethod(
            Invocation.getter(#firestore),
            returnValue: _FakeFirebaseFirestore_0(
              this,
              Invocation.getter(#firestore),
            ),
            returnValueForMissingStub: _FakeFirebaseFirestore_0(
              this,
              Invocation.getter(#firestore),
            ),
          )
          as _i2.FirebaseFirestore);

  @override
  set firestore(_i2.FirebaseFirestore? _firestore) => super.noSuchMethod(
    Invocation.setter(#firestore, _firestore),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<_i3.UserCredential?> signInWithEmailAndPassword(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithEmailAndPassword, [email, password]),
            returnValue: _i5.Future<_i3.UserCredential?>.value(),
            returnValueForMissingStub: _i5.Future<_i3.UserCredential?>.value(),
          )
          as _i5.Future<_i3.UserCredential?>);

  @override
  _i5.Future<_i3.UserCredential?> signInWithGoogle() =>
      (super.noSuchMethod(
            Invocation.method(#signInWithGoogle, []),
            returnValue: _i5.Future<_i3.UserCredential?>.value(),
            returnValueForMissingStub: _i5.Future<_i3.UserCredential?>.value(),
          )
          as _i5.Future<_i3.UserCredential?>);

  @override
  _i5.Future<_i3.UserCredential?> signUpWithEmailAndPassword(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#signUpWithEmailAndPassword, [email, password]),
            returnValue: _i5.Future<_i3.UserCredential?>.value(),
            returnValueForMissingStub: _i5.Future<_i3.UserCredential?>.value(),
          )
          as _i5.Future<_i3.UserCredential?>);

  @override
  _i5.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i14.User?> fetchUser(_i3.User? firebaseUser) =>
      (super.noSuchMethod(
            Invocation.method(#fetchUser, [firebaseUser]),
            returnValue: _i5.Future<_i14.User?>.value(),
            returnValueForMissingStub: _i5.Future<_i14.User?>.value(),
          )
          as _i5.Future<_i14.User?>);

  @override
  _i5.Future<void> createUser(_i14.User? user) =>
      (super.noSuchMethod(
            Invocation.method(#createUser, [user]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> resetPassword(String? email) =>
      (super.noSuchMethod(
            Invocation.method(#resetPassword, [email]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> updateUserFavourites(_i14.User? user) =>
      (super.noSuchMethod(
            Invocation.method(#updateUserFavourites, [user]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<List<_i14.User>> fetchUsers() =>
      (super.noSuchMethod(
            Invocation.method(#fetchUsers, []),
            returnValue: _i5.Future<List<_i14.User>>.value(<_i14.User>[]),
            returnValueForMissingStub: _i5.Future<List<_i14.User>>.value(
              <_i14.User>[],
            ),
          )
          as _i5.Future<List<_i14.User>>);

  @override
  _i5.Future<void> updateUserProfile(_i14.User? user) =>
      (super.noSuchMethod(
            Invocation.method(#updateUserProfile, [user]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [InstructorService].
///
/// See the documentation for Mockito's code generation for more information.
class MockInstructorService extends _i1.Mock implements _i15.InstructorService {
  @override
  _i5.Future<List<_i16.Instructor>> fetchInstructors() =>
      (super.noSuchMethod(
            Invocation.method(#fetchInstructors, []),
            returnValue: _i5.Future<List<_i16.Instructor>>.value(
              <_i16.Instructor>[],
            ),
            returnValueForMissingStub: _i5.Future<List<_i16.Instructor>>.value(
              <_i16.Instructor>[],
            ),
          )
          as _i5.Future<List<_i16.Instructor>>);

  @override
  _i5.Future<_i16.Instructor?> fetchInstructorById(String? instructorId) =>
      (super.noSuchMethod(
            Invocation.method(#fetchInstructorById, [instructorId]),
            returnValue: _i5.Future<_i16.Instructor?>.value(),
            returnValueForMissingStub: _i5.Future<_i16.Instructor?>.value(),
          )
          as _i5.Future<_i16.Instructor?>);

  @override
  _i5.Future<String?> addInstructor(_i16.Instructor? instructor) =>
      (super.noSuchMethod(
            Invocation.method(#addInstructor, [instructor]),
            returnValue: _i5.Future<String?>.value(),
            returnValueForMissingStub: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);

  @override
  _i5.Future<void> deleteInstructor(_i16.Instructor? instructor) =>
      (super.noSuchMethod(
            Invocation.method(#deleteInstructor, [instructor]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [SlotService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSlotService extends _i1.Mock implements _i17.SlotService {
  @override
  _i5.Future<List<_i7.Slot>> fetchUpcomingSlots(
    String? gymId,
    String? activityId,
    DateTime? date,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#fetchUpcomingSlots, [gymId, activityId, date]),
            returnValue: _i5.Future<List<_i7.Slot>>.value(<_i7.Slot>[]),
            returnValueForMissingStub: _i5.Future<List<_i7.Slot>>.value(
              <_i7.Slot>[],
            ),
          )
          as _i5.Future<List<_i7.Slot>>);

  @override
  _i5.Future<void> createSlot(_i7.Slot? slot) =>
      (super.noSuchMethod(
            Invocation.method(#createSlot, [slot]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> updateSlot(_i7.Slot? slot) =>
      (super.noSuchMethod(
            Invocation.method(#updateSlot, [slot]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> deleteSlot(String? slotId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteSlot, [slotId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}
