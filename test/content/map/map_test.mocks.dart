// Mocks generated by Mockito 5.4.5 from annotations
// in dima_project/test/content/map/map_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:convert' as _i15;
import 'dart:typed_data' as _i7;
import 'dart:ui' as _i12;

import 'package:dima_project/content/home/gym/activity/activity_model.dart'
    as _i10;
import 'package:dima_project/content/home/gym/gym_model.dart' as _i9;
import 'package:dima_project/content/map/location_model.dart' as _i3;
import 'package:dima_project/global_providers/gym_provider.dart' as _i8;
import 'package:dima_project/global_providers/map_provider.dart' as _i13;
import 'package:geolocator/geolocator.dart' as _i14;
import 'package:google_maps_flutter/google_maps_flutter.dart' as _i5;
import 'package:google_maps_flutter_platform_interface/google_maps_flutter_platform_interface.dart'
    as _i2;
import 'package:http/http.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLatLngBounds_0 extends _i1.SmartFake implements _i2.LatLngBounds {
  _FakeLatLngBounds_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeScreenCoordinate_1 extends _i1.SmartFake
    implements _i2.ScreenCoordinate {
  _FakeScreenCoordinate_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLatLng_2 extends _i1.SmartFake implements _i2.LatLng {
  _FakeLatLng_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLocations_3 extends _i1.SmartFake implements _i3.Locations {
  _FakeLocations_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeResponse_4 extends _i1.SmartFake implements _i4.Response {
  _FakeResponse_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamedResponse_5 extends _i1.SmartFake
    implements _i4.StreamedResponse {
  _FakeStreamedResponse_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GoogleMapController].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleMapController extends _i1.Mock
    implements _i5.GoogleMapController {
  MockGoogleMapController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get mapId =>
      (super.noSuchMethod(Invocation.getter(#mapId), returnValue: 0) as int);

  @override
  _i6.Future<void> clearTileCache(_i2.TileOverlayId? tileOverlayId) =>
      (super.noSuchMethod(
            Invocation.method(#clearTileCache, [tileOverlayId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> animateCamera(
    _i2.CameraUpdate? cameraUpdate, {
    Duration? duration,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #animateCamera,
              [cameraUpdate],
              {#duration: duration},
            ),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> moveCamera(_i2.CameraUpdate? cameraUpdate) =>
      (super.noSuchMethod(
            Invocation.method(#moveCamera, [cameraUpdate]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> setMapStyle(String? mapStyle) =>
      (super.noSuchMethod(
            Invocation.method(#setMapStyle, [mapStyle]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<String?> getStyleError() =>
      (super.noSuchMethod(
            Invocation.method(#getStyleError, []),
            returnValue: _i6.Future<String?>.value(),
          )
          as _i6.Future<String?>);

  @override
  _i6.Future<_i2.LatLngBounds> getVisibleRegion() =>
      (super.noSuchMethod(
            Invocation.method(#getVisibleRegion, []),
            returnValue: _i6.Future<_i2.LatLngBounds>.value(
              _FakeLatLngBounds_0(
                this,
                Invocation.method(#getVisibleRegion, []),
              ),
            ),
          )
          as _i6.Future<_i2.LatLngBounds>);

  @override
  _i6.Future<_i2.ScreenCoordinate> getScreenCoordinate(_i2.LatLng? latLng) =>
      (super.noSuchMethod(
            Invocation.method(#getScreenCoordinate, [latLng]),
            returnValue: _i6.Future<_i2.ScreenCoordinate>.value(
              _FakeScreenCoordinate_1(
                this,
                Invocation.method(#getScreenCoordinate, [latLng]),
              ),
            ),
          )
          as _i6.Future<_i2.ScreenCoordinate>);

  @override
  _i6.Future<_i2.LatLng> getLatLng(_i2.ScreenCoordinate? screenCoordinate) =>
      (super.noSuchMethod(
            Invocation.method(#getLatLng, [screenCoordinate]),
            returnValue: _i6.Future<_i2.LatLng>.value(
              _FakeLatLng_2(
                this,
                Invocation.method(#getLatLng, [screenCoordinate]),
              ),
            ),
          )
          as _i6.Future<_i2.LatLng>);

  @override
  _i6.Future<void> showMarkerInfoWindow(_i2.MarkerId? markerId) =>
      (super.noSuchMethod(
            Invocation.method(#showMarkerInfoWindow, [markerId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> hideMarkerInfoWindow(_i2.MarkerId? markerId) =>
      (super.noSuchMethod(
            Invocation.method(#hideMarkerInfoWindow, [markerId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<bool> isMarkerInfoWindowShown(_i2.MarkerId? markerId) =>
      (super.noSuchMethod(
            Invocation.method(#isMarkerInfoWindowShown, [markerId]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<double> getZoomLevel() =>
      (super.noSuchMethod(
            Invocation.method(#getZoomLevel, []),
            returnValue: _i6.Future<double>.value(0.0),
          )
          as _i6.Future<double>);

  @override
  _i6.Future<_i7.Uint8List?> takeSnapshot() =>
      (super.noSuchMethod(
            Invocation.method(#takeSnapshot, []),
            returnValue: _i6.Future<_i7.Uint8List?>.value(),
          )
          as _i6.Future<_i7.Uint8List?>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [GymProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockGymProvider extends _i1.Mock implements _i8.GymProvider {
  MockGymProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i6.Future<List<_i9.Gym>> getGymList() =>
      (super.noSuchMethod(
            Invocation.method(#getGymList, []),
            returnValue: _i6.Future<List<_i9.Gym>>.value(<_i9.Gym>[]),
          )
          as _i6.Future<List<_i9.Gym>>);

  @override
  _i6.Future<void> addGym(_i9.Gym? gym) =>
      (super.noSuchMethod(
            Invocation.method(#addGym, [gym]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> updateGym(_i9.Gym? gym) =>
      (super.noSuchMethod(
            Invocation.method(#updateGym, [gym]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> removeGym(_i9.Gym? gym) =>
      (super.noSuchMethod(
            Invocation.method(#removeGym, [gym]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> addActivity(_i9.Gym? gym, _i10.Activity? activity) =>
      (super.noSuchMethod(
            Invocation.method(#addActivity, [gym, activity]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> updateActivity(_i9.Gym? gym, _i10.Activity? activity) =>
      (super.noSuchMethod(
            Invocation.method(#updateActivity, [gym, activity]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> removeActivity(_i9.Gym? gym, _i10.Activity? activity) =>
      (super.noSuchMethod(
            Invocation.method(#removeActivity, [gym, activity]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  int getGymIndex(_i9.Gym? gym) =>
      (super.noSuchMethod(
            Invocation.method(#getGymIndex, [gym]),
            returnValue: 0,
          )
          as int);

  @override
  _i6.Future<String> uploadImage(String? base64Image) =>
      (super.noSuchMethod(
            Invocation.method(#uploadImage, [base64Image]),
            returnValue: _i6.Future<String>.value(
              _i11.dummyValue<String>(
                this,
                Invocation.method(#uploadImage, [base64Image]),
              ),
            ),
          )
          as _i6.Future<String>);

  @override
  void addListener(_i12.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i12.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [MapProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockMapProvider extends _i1.Mock implements _i13.MapProvider {
  MockMapProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LatLng get savedPosition =>
      (super.noSuchMethod(
            Invocation.getter(#savedPosition),
            returnValue: _FakeLatLng_2(this, Invocation.getter(#savedPosition)),
          )
          as _i2.LatLng);

  @override
  double get savedZoom =>
      (super.noSuchMethod(Invocation.getter(#savedZoom), returnValue: 0.0)
          as double);

  @override
  bool get isInitialized =>
      (super.noSuchMethod(Invocation.getter(#isInitialized), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i6.Future<_i3.Locations> getGymLocations(List<_i9.Gym>? gymList) =>
      (super.noSuchMethod(
            Invocation.method(#getGymLocations, [gymList]),
            returnValue: _i6.Future<_i3.Locations>.value(
              _FakeLocations_3(
                this,
                Invocation.method(#getGymLocations, [gymList]),
              ),
            ),
          )
          as _i6.Future<_i3.Locations>);

  @override
  _i6.Future<_i14.Position?> getUserLocation() =>
      (super.noSuchMethod(
            Invocation.method(#getUserLocation, []),
            returnValue: _i6.Future<_i14.Position?>.value(),
          )
          as _i6.Future<_i14.Position?>);

  @override
  Map<String, _i2.Marker> getMarkers(_i3.Locations? gyms) =>
      (super.noSuchMethod(
            Invocation.method(#getMarkers, [gyms]),
            returnValue: <String, _i2.Marker>{},
          )
          as Map<String, _i2.Marker>);

  @override
  void saveMapState(_i2.LatLng? position, double? zoom) => super.noSuchMethod(
    Invocation.method(#saveMapState, [position, zoom]),
    returnValueForMissingStub: null,
  );

  @override
  void setInitialized(bool? value) => super.noSuchMethod(
    Invocation.method(#setInitialized, [value]),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i12.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i12.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i4.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i4.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#head, [url], {#headers: headers}),
            returnValue: _i6.Future<_i4.Response>.value(
              _FakeResponse_4(
                this,
                Invocation.method(#head, [url], {#headers: headers}),
              ),
            ),
          )
          as _i6.Future<_i4.Response>);

  @override
  _i6.Future<_i4.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#get, [url], {#headers: headers}),
            returnValue: _i6.Future<_i4.Response>.value(
              _FakeResponse_4(
                this,
                Invocation.method(#get, [url], {#headers: headers}),
              ),
            ),
          )
          as _i6.Future<_i4.Response>);

  @override
  _i6.Future<_i4.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i15.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #post,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i6.Future<_i4.Response>.value(
              _FakeResponse_4(
                this,
                Invocation.method(
                  #post,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i6.Future<_i4.Response>);

  @override
  _i6.Future<_i4.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i15.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #put,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i6.Future<_i4.Response>.value(
              _FakeResponse_4(
                this,
                Invocation.method(
                  #put,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i6.Future<_i4.Response>);

  @override
  _i6.Future<_i4.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i15.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #patch,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i6.Future<_i4.Response>.value(
              _FakeResponse_4(
                this,
                Invocation.method(
                  #patch,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i6.Future<_i4.Response>);

  @override
  _i6.Future<_i4.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i15.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #delete,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i6.Future<_i4.Response>.value(
              _FakeResponse_4(
                this,
                Invocation.method(
                  #delete,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i6.Future<_i4.Response>);

  @override
  _i6.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#read, [url], {#headers: headers}),
            returnValue: _i6.Future<String>.value(
              _i11.dummyValue<String>(
                this,
                Invocation.method(#read, [url], {#headers: headers}),
              ),
            ),
          )
          as _i6.Future<String>);

  @override
  _i6.Future<_i7.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readBytes, [url], {#headers: headers}),
            returnValue: _i6.Future<_i7.Uint8List>.value(_i7.Uint8List(0)),
          )
          as _i6.Future<_i7.Uint8List>);

  @override
  _i6.Future<_i4.StreamedResponse> send(_i4.BaseRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#send, [request]),
            returnValue: _i6.Future<_i4.StreamedResponse>.value(
              _FakeStreamedResponse_5(
                this,
                Invocation.method(#send, [request]),
              ),
            ),
          )
          as _i6.Future<_i4.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
    Invocation.method(#close, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [Response].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpResponse extends _i1.Mock implements _i4.Response {
  MockHttpResponse() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Uint8List get bodyBytes =>
      (super.noSuchMethod(
            Invocation.getter(#bodyBytes),
            returnValue: _i7.Uint8List(0),
          )
          as _i7.Uint8List);

  @override
  String get body =>
      (super.noSuchMethod(
            Invocation.getter(#body),
            returnValue: _i11.dummyValue<String>(
              this,
              Invocation.getter(#body),
            ),
          )
          as String);

  @override
  int get statusCode =>
      (super.noSuchMethod(Invocation.getter(#statusCode), returnValue: 0)
          as int);

  @override
  Map<String, String> get headers =>
      (super.noSuchMethod(
            Invocation.getter(#headers),
            returnValue: <String, String>{},
          )
          as Map<String, String>);

  @override
  bool get isRedirect =>
      (super.noSuchMethod(Invocation.getter(#isRedirect), returnValue: false)
          as bool);

  @override
  bool get persistentConnection =>
      (super.noSuchMethod(
            Invocation.getter(#persistentConnection),
            returnValue: false,
          )
          as bool);
}
