// Mocks generated by Mockito 5.4.5 from annotations
// in dima_project/test/content/home/home_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:ui' as _i6;

import 'package:dima_project/content/home/gym/activity/activity_model.dart'
    as _i5;
import 'package:dima_project/content/home/gym/gym_model.dart' as _i4;
import 'package:dima_project/global_providers/gym_provider.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [GymProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockGymProvider extends _i1.Mock implements _i2.GymProvider {
  MockGymProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i3.Future<List<_i4.Gym>> getGymList() =>
      (super.noSuchMethod(
            Invocation.method(#getGymList, []),
            returnValue: _i3.Future<List<_i4.Gym>>.value(<_i4.Gym>[]),
          )
          as _i3.Future<List<_i4.Gym>>);

  @override
  _i3.Future<void> addGym(_i4.Gym? gym) =>
      (super.noSuchMethod(
            Invocation.method(#addGym, [gym]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> updateGym(_i4.Gym? gym) =>
      (super.noSuchMethod(
            Invocation.method(#updateGym, [gym]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> removeGym(_i4.Gym? gym) =>
      (super.noSuchMethod(
            Invocation.method(#removeGym, [gym]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> addActivity(_i4.Gym? gym, _i5.Activity? activity) =>
      (super.noSuchMethod(
            Invocation.method(#addActivity, [gym, activity]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> updateActivity(_i4.Gym? gym, _i5.Activity? activity) =>
      (super.noSuchMethod(
            Invocation.method(#updateActivity, [gym, activity]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> removeActivity(_i4.Gym? gym, _i5.Activity? activity) =>
      (super.noSuchMethod(
            Invocation.method(#removeActivity, [gym, activity]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  int getGymIndex(_i4.Gym? gym) =>
      (super.noSuchMethod(
            Invocation.method(#getGymIndex, [gym]),
            returnValue: 0,
          )
          as int);

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
